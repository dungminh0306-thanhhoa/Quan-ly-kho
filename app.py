import streamlit as st
import pandas as pd
import os

# =========================
# C·∫§U H√åNH C∆† B·∫¢N
# =========================
st.set_page_config(page_title="Qu·∫£n l√Ω M√£ h√†ng & Nguy√™n ph·ª• li·ªáu", layout="wide")
DATA_FILE = "data.csv"

# =========================
# TI·ªÜN √çCH L∆ØU / ƒê·ªåC
# =========================
def ensure_store():
    if not os.path.exists(DATA_FILE):
        pd.DataFrame(columns=["M√£ h√†ng", "M√†u s·∫Øc", "S·ªë l∆∞·ª£ng", "Nguy√™n li·ªáu"]).to_csv(DATA_FILE, index=False)

def load_data() -> pd.DataFrame:
    ensure_store()
    try:
        df = pd.read_csv(DATA_FILE)
    except Exception:
        df = pd.DataFrame(columns=["M√£ h√†ng", "M√†u s·∫Øc", "S·ªë l∆∞·ª£ng", "Nguy√™n li·ªáu"])
    # Chu·∫©n h√≥a c·ªôt & ki·ªÉu d·ªØ li·ªáu
    for col in ["M√£ h√†ng", "M√†u s·∫Øc", "Nguy√™n li·ªáu"]:
        if col in df.columns:
            df[col] = df[col].astype(str)
    if "S·ªë l∆∞·ª£ng" in df.columns:
        # √©p ki·ªÉu s·ªë; l·ªói th√¨ ƒë∆∞a v·ªÅ 0
        df["S·ªë l∆∞·ª£ng"] = pd.to_numeric(df["S·ªë l∆∞·ª£ng"], errors="coerce").fillna(0).astype(int)
    return df

def save_data(df: pd.DataFrame):
    # ƒê·∫£m b·∫£o c·ªôt ƒë·∫ßy ƒë·ªß & th·ª© t·ª±
    base_cols = ["M√£ h√†ng", "M√†u s·∫Øc", "S·ªë l∆∞·ª£ng", "Nguy√™n li·ªáu"]
    for c in base_cols:
        if c not in df.columns:
            df[c] = ""
    df = df[base_cols]
    df.to_csv(DATA_FILE, index=False)

def collapse_ma_hang_once(df: pd.DataFrame) -> pd.DataFrame:
    """·∫®n gi√° tr·ªã 'M√£ h√†ng' ·ªü c√°c d√≤ng sau trong c√πng nh√≥m (hi·ªÉn th·ªã nh∆∞ g·ªôp √¥)."""
    if df.empty:
        return df.copy()
    out = df.copy()
    for ma, idx in out.groupby("M√£ h√†ng", sort=False).groups.items():
        # idx l√† Index c·ªßa c√°c d√≤ng trong nh√≥m
        if len(idx) > 1:
            out.loc[idx[1:], "M√£ h√†ng"] = ""
    return out

# =========================
# KH·ªûI T·∫†O SESSION
# =========================
if "add_table" not in st.session_state:
    st.session_state.add_table = None   # DataFrame nh·∫≠p li·ªáu t·∫°m th·ªùi
if "add_ma" not in st.session_state:
    st.session_state.add_ma = ""        # M√£ h√†ng ƒëang nh·∫≠p

# =========================
# GIAO DI·ªÜN MENU
# =========================
st.sidebar.title("üìã Menu")
menu = st.sidebar.radio(
    "Ch·ªçn ch·ª©c nƒÉng:",
    [
        "üìë Xem danh s√°ch",
        "‚ûï Th√™m m√£ h√†ng m·ªõi",
        "‚úèÔ∏è Ch·ªânh s·ª≠a m√£ h√†ng",
        "üóëÔ∏è X√≥a m√£ h√†ng"
    ]
)

# =========================
# 1) XEM DANH S√ÅCH
# =========================
if menu == "üìë Xem danh s√°ch":
    st.title("üìë Danh s√°ch m√£ h√†ng")
    df = load_data()

    col_a, col_b = st.columns([2, 1])
    with col_a:
        search = st.text_input("üîç T√¨m ki·∫øm (theo M√£ h√†ng / M√†u s·∫Øc / Nguy√™n li·ªáu):", "")
    with col_b:
        only_ma = st.checkbox("·∫®n l·∫∑p 'M√£ h√†ng' (m√£ xu·∫•t hi·ªán 1 l·∫ßn)", value=True)

    if search.strip():
        s = search.lower()
        mask = (
            df["M√£ h√†ng"].str.lower().str.contains(s)
            | df["M√†u s·∫Øc"].str.lower().str.contains(s)
            | df["Nguy√™n li·ªáu"].str.lower().str.contains(s)
        )
        df_view = df[mask].copy()
    else:
        df_view = df.copy()

    if only_ma:
        df_view = collapse_ma_hang_once(df_view)

    st.dataframe(df_view, use_container_width=True)

# =========================
# 2) TH√äM M√É H√ÄNG M·ªöI
# =========================
elif menu == "‚ûï Th√™m m√£ h√†ng m·ªõi":
    st.title("‚ûï Th√™m m√£ h√†ng m·ªõi (nh·∫≠p theo b·∫£ng)")

    df = load_data()

    # B∆∞·ªõc 1: nh·∫≠p m√£ h√†ng & s·ªë d√≤ng
    with st.form("setup_new_ma", clear_on_submit=False):
        col1, col2 = st.columns([2, 1])
        with col1:
            ma_input = st.text_input("M√£ h√†ng:", value=st.session_state.add_ma)
        with col2:
            so_dong = st.number_input("S·ªë d√≤ng (s·ªë m√†u):", min_value=1, max_value=200, value=5, step=1)
        create_clicked = st.form_submit_button("T·∫°o b·∫£ng nh·∫≠p")

    # Khi t·∫°o b·∫£ng: kh·ªüi t·∫°o b·∫£ng tr·ªëng v·ªõi s·ªë d√≤ng mong mu·ªën
    if create_clicked:
        st.session_state.add_ma = ma_input.strip()
        rows = int(so_dong)
        st.session_state.add_table = pd.DataFrame({
            "M√†u s·∫Øc": ["" for _ in range(rows)],
            "S·ªë l∆∞·ª£ng": [0 for _ in range(rows)],
            "Nguy√™n li·ªáu": ["" for _ in range(rows)]
        })

    # B∆∞·ªõc 2: hi·ªÉn th·ªã b·∫£ng nh·∫≠p tr·ª±c ti·∫øp
    if st.session_state.add_ma and isinstance(st.session_state.add_table, pd.DataFrame):
        st.markdown(f"**M√£ h√†ng:** `{st.session_state.add_ma}`")
        st.caption("Nh·∫≠p tr·ª±c ti·∫øp v√†o b·∫£ng b√™n d∆∞·ªõi. B·∫°n c√≥ th·ªÉ th√™m/b·ªõt d√≤ng.")

        edited = st.data_editor(
            st.session_state.add_table,
            num_rows="dynamic",
            use_container_width=True,
            key="add_editor"
        )

        # L∆∞u l·∫°i b·∫£ng ƒë√£ ch·ªânh v√†o session
        st.session_state.add_table = edited

        # N√∫t L∆∞u
        if st.button("üíæ L∆∞u m√£ h√†ng n√†y"):
            ma_hang = st.session_state.add_ma
            temp = st.session_state.add_table.copy()

            # Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng (kh√¥ng c√≥ m√†u s·∫Øc)
            temp = temp[ temp["M√†u s·∫Øc"].astype(str).str.strip() != "" ].copy()
            # √âp ki·ªÉu s·ªë l∆∞·ª£ng
            temp["S·ªë l∆∞·ª£ng"] = pd.to_numeric(temp["S·ªë l∆∞·ª£ng"], errors="coerce").fillna(0).astype(int)

            if temp.empty:
                st.warning("Ch∆∞a c√≥ d√≤ng h·ª£p l·ªá ƒë·ªÉ l∆∞u.")
            else:
                # Auto k·∫ø th·ª´a nguy√™n ph·ª• li·ªáu n·∫øu m√£ h√†ng ƒë√£ t·ªìn t·∫°i & √¥ Nguy√™n li·ªáu ƒëang tr·ªëng
                if ma_hang in df["M√£ h√†ng"].values:
                    existing_nl = df.loc[df["M√£ h√†ng"] == ma_hang, "Nguy√™n li·ªáu"]
                    inherited = existing_nl.iloc[0] if not existing_nl.empty else ""
                    temp.loc[temp["Nguy√™n li·ªáu"].astype(str).str.strip() == "", "Nguy√™n li·ªáu"] = inherited

                # Gh√©p v·ªõi M√£ h√†ng ƒë·ªÉ l∆∞u
                temp.insert(0, "M√£ h√†ng", ma_hang)

                # Ghi th√™m (kh√¥ng ghi ƒë√®)
                df_out = pd.concat([df, temp], ignore_index=True)
                save_data(df_out)

                st.success(f"‚úÖ ƒê√£ l∆∞u {len(temp)} d√≤ng cho m√£ h√†ng `{ma_hang}`.")
                # Hi·ªÉn th·ªã l·∫°i ph·∫ßn v·ª´a l∆∞u (·∫©n l·∫∑p m√£ h√†ng)
                st.subheader("B·∫£ng v·ª´a l∆∞u")
                st.dataframe(collapse_ma_hang_once(temp), use_container_width=True)

                # Reset b·∫£ng nh·∫≠p (gi·ªØ l·∫°i m√£ h√†ng cho l·∫ßn nh·∫≠p ti·∫øp theo n·∫øu mu·ªën)
                st.session_state.add_table = None

# =========================
# 3) CH·ªàNH S·ª¨A M√É H√ÄNG
# =========================
elif menu == "‚úèÔ∏è Ch·ªânh s·ª≠a m√£ h√†ng":
    st.title("‚úèÔ∏è Ch·ªânh s·ª≠a m√£ h√†ng")
    df = load_data()

    if df.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªÉ ch·ªânh s·ª≠a.")
    else:
        ma_list = df["M√£ h√†ng"].unique().tolist()
        ma_pick = st.selectbox("Ch·ªçn m√£ h√†ng:", ma_list)

        sub = df[df["M√£ h√†ng"] == ma_pick].copy()
        st.caption("S·ª≠a tr·ª±c ti·∫øp r·ªìi b·∫•m L∆∞u thay ƒë·ªïi.")
        edited = st.data_editor(sub, num_rows="dynamic", use_container_width=True, key="edit_editor")

        colL, colR = st.columns([1, 1])
        with colL:
            if st.button("üíæ L∆∞u thay ƒë·ªïi"):
                # Ghi ƒë√® nh√≥m m√£ h√†ng n√†y b·∫±ng edited
                remain = df[df["M√£ h√†ng"] != ma_pick]
                df_new = pd.concat([remain, edited], ignore_index=True)
                # Chu·∫©n h√≥a ki·ªÉu d·ªØ li·ªáu
                if "S·ªë l∆∞·ª£ng" in df_new.columns:
                    df_new["S·ªë l∆∞·ª£ng"] = pd.to_numeric(df_new["S·ªë l∆∞·ª£ng"], errors="coerce").fillna(0).astype(int)
                save_data(df_new)
                st.success("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi.")
        with colR:
            # X√≥a d√≤ng theo index trong nh√≥m ƒëang xem
            if not edited.empty:
                idx_to_del = st.number_input("X√≥a d√≤ng (STT trong b·∫£ng ƒëang xem)", min_value=0, max_value=len(edited)-1, step=1, value=0)
                if st.button("‚ùå X√≥a d√≤ng ƒë√£ ch·ªçn"):
                    edited2 = edited.drop(edited.index[idx_to_del]).reset_index(drop=True)
                    remain = df[df["M√£ h√†ng"] != ma_pick]
                    df_new = pd.concat([remain, edited2], ignore_index=True)
                    if "S·ªë l∆∞·ª£ng" in df_new.columns:
                        df_new["S·ªë l∆∞·ª£ng"] = pd.to_numeric(df_new["S·ªë l∆∞·ª£ng"], errors="coerce").fillna(0).astype(int)
                    save_data(df_new)
                    st.success("‚úÖ ƒê√£ x√≥a d√≤ng trong nh√≥m.")

# =========================
# 4) X√ìA M√É H√ÄNG
# =========================
elif menu == "üóëÔ∏è X√≥a m√£ h√†ng":
    st.title("üóëÔ∏è X√≥a m√£ h√†ng")
    df = load_data()

    if df.empty:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu.")
    else:
        ma_list = df["M√£ h√†ng"].unique().tolist()
        ma_pick = st.selectbox("Ch·ªçn m√£ h√†ng c·∫ßn x√≥a:", ma_list)
        if st.button("‚ùå X√≥a to√†n b·ªô m√£ h√†ng n√†y"):
            df_new = df[df["M√£ h√†ng"] != ma_pick].copy()
            save_data(df_new)
            st.success(f"‚úÖ ƒê√£ x√≥a to√†n b·ªô m√£ h√†ng `{ma_pick}`.")
